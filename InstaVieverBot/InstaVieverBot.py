import telegram
from telegram import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import os
from instagrapi import Client
import logging
import asyncio
import aiohttp
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
from bs4 import BeautifulSoup
import random
import time
from collections import deque
import re
try:
    import brotli
except ImportError:
    brotli = None
try:
    import brotlipy
except ImportError:
    brotlipy = None

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞, Instagram-–∞–∫–∞—É–Ω—Ç —ñ –ø—Ä–æ–∫—Å—ñ
TOKEN = os.getenv('BOT_TOKEN')
IG_USERNAME = os.getenv('IG_USERNAME', 'Kubgodua')
IG_PASSWORD = os.getenv('IG_PASSWORD', 'wearechempion')
TIKTOK_TOKEN = os.getenv('TIKTOK_TOKEN')
PROXY = os.getenv('PROXY')

# –õ—ñ–º—ñ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
REQUEST_LIMITS = {
    'instagram': {'limit': 50, 'reset_interval': 3600},
    'tiktok': {'limit': 500, 'reset_interval': 86400},
    'pinterest': {'limit': 500, 'reset_interval': 86400}
}
REQUEST_COUNTS_FILE = "request_counts.json"

# –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü—ñ—ó
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1'
]

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞—Ç—Ä–∏–º–æ–∫ –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
DELAY_HISTORY = deque(maxlen=3)

def load_request_counts():
    try:
        with open(REQUEST_COUNTS_FILE, "r") as f:
            return json.load(f)
    except:
        return {
            'instagram': {'count': 0, 'last_reset': time.time()},
            'tiktok': {'count': 0, 'last_reset': time.time()},
            'pinterest': {'count': 0, 'last_reset': time.time()}
        }

def save_request_counts(counts):
    with open(REQUEST_COUNTS_FILE, "w") as f:
        json.dump(counts, f)

async def check_request_limit(platform, update, context):
    counts = load_request_counts()
    current_time = time.time()
    platform_data = counts.get(platform, {'count': 0, 'last_reset': current_time})
    
    reset_interval = REQUEST_LIMITS[platform]['reset_interval']
    if current_time - platform_data['last_reset'] >= reset_interval:
        platform_data['count'] = 0
        platform_data['last_reset'] = current_time
        counts[platform] = platform_data
        save_request_counts(counts)
    
    if platform_data['count'] >= REQUEST_LIMITS[platform]['limit']:
        wait_time = reset_interval - (current_time - platform_data['last_reset'])
        logger.warning(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –¥–ª—è {platform}: {platform_data['count']}/{REQUEST_LIMITS[platform]['limit']}. –ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥.")
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–µ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ —Ä–∞–∑.")
        await asyncio.sleep(wait_time)
        platform_data['count'] = 0
        platform_data['last_reset'] = current_time
        counts[platform] = platform_data
        save_request_counts(counts)
        return False
    
    platform_data['count'] += 1
    counts[platform] = platform_data
    save_request_counts(counts)
    logger.info(f"–ó–∞–ø–∏—Ç –¥–æ {platform}: {platform_data['count']}/{REQUEST_LIMITS[platform]['limit']}")
    return True

def get_random_delay():
    while True:
        delay = random.uniform(1, 6)
        rounded_delay = round(delay, 2)
        if rounded_delay not in DELAY_HISTORY:
            DELAY_HISTORY.append(rounded_delay)
            return rounded_delay

def get_random_user_agent():
    return random.choice(USER_AGENTS)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")],
        [KeyboardButton("–î–æ–ø–æ–º–æ–≥–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤—ñ—Ç! –Ø @InstaViewerBot. –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Instagram (–ø–æ—Å—Ç –∞–±–æ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è Stories), TikTok –∞–±–æ Pinterest-–ø–æ—Å—Ç, —ñ —è –ø–æ–∫–∞–∂—É –≤—Å—ñ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ! üì∏",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*\n"
        "1. –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Instagram-–ø–æ—Å—Ç (https://www.instagram.com/p/XXXXX/), –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è Stories (https://www.instagram.com/username/), TikTok-–≤—ñ–¥–µ–æ (https://www.tiktok.com/@user/video/XXXXX) –∞–±–æ Pinterest-–ø–æ—Å—Ç (https://www.pinterest.com/pin/XXXXX/).\n"
        "2. –Ø –ø–æ–≤–µ—Ä–Ω—É –≤—Å—ñ —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ Stories!\n"
        "üìå *–ü–æ—Ä–∞–¥–∞:* –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.\n"
        "–Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /about, /stats, /feedback, /donate",
        parse_mode="Markdown"
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø @InstaViewerBot ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É Instagram, TikTok —Ç–∞ Pinterest-–∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤! "
        "–°—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ. üòé"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    try:
        with open("stats.json", "r") as f:
            stats = json.load(f)
        count = stats.get(user_id, 0)
        await update.message.reply_text(f"üìä –¢–∏ –Ω–∞–¥—ñ—Å–ª–∞–≤ {count} –ø–æ—Å–∏–ª–∞–Ω—å!")
    except:
        await update.message.reply_text("–©–µ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞–¥—ñ—à–ª–∏ –ø–µ—Ä—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—ó!")

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíô –ü—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤! –í–∞—à –¥–æ–Ω–∞—Ç –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —â–µ –∫—Ä—É—Ç—ñ—à—ñ –ø—Ä–æ—î–∫—Ç–∏!\n"
        "üí≥ Monobank: 7777 4444 7777 4444",
        parse_mode="Markdown"
    )

def save_stats(user_id, link):
    try:
        with open("stats.json", "r") as f:
            stats = json.load(f)
    except:
        stats = {}
    stats[str(user_id)] = stats.get(str(user_id), 0) + 1
    with open("stats.json", "w") as f:
        json.dump(stats, f)

async def get_instagram_media(url, update, context):
    if not await check_request_limit('instagram', update, context):
        return None
    await asyncio.sleep(get_random_delay())
    try:
        cl = Client()
        cl.set_user_agent(get_random_user_agent())
        if PROXY:
            cl.set_proxy(PROXY)
        session_file = "instagram_session.json"
        if os.path.exists(session_file):
            cl.load_settings(session_file)
        cl.login(IG_USERNAME, IG_PASSWORD)
        cl.dump_settings(session_file)
        media_pk = cl.media_pk_from_url(url)
        media = cl.media_info(media_pk)
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ Instagram –º–µ–¥—ñ–∞: type={media.media_type}, resources_count={len(media.resources) if media.resources else 0}")
        return media
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ instagrapi: {str(e)}")
        return None

async def get_instagram_stories(url, update, context):
    if not await check_request_limit('instagram', update, context):
        return None
    await asyncio.sleep(get_random_delay())
    try:
        cl = Client()
        cl.set_user_agent(get_random_user_agent())
        if PROXY:
            cl.set_proxy(PROXY)
        session_file = "instagram_session.json"
        if os.path.exists(session_file):
            cl.load_settings(session_file)
        cl.login(IG_USERNAME, IG_PASSWORD)
        cl.dump_settings(session_file)
        username = url.split("instagram.com/")[1].rstrip('/').split('/')[0]
        user_id = cl.user_id_from_username(username)
        stories = cl.user_stories(user_id)
        if not stories:
            logger.info(f"Stories –¥–ª—è {username} –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
            return None
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ Instagram Stories: count={len(stories)}")
        return stories
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Stories: {str(e)}")
        return None

async def get_tiktok_media(url, update, context):
    if not await check_request_limit('tiktok', update, context):
        return None
    await asyncio.sleep(get_random_delay())
    logger.info("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ TikTokApi, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–∏—à–µ fallback")
    return await get_tiktok_media_fallback(url, update, context)

async def get_tiktok_media_fallback(url, update, context):
    if not await check_request_limit('tiktok', update, context):
        return None
    await asyncio.sleep(get_random_delay())
    try:
        headers = {
            'User-Agent': get_random_user_agent(),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Referer': 'https://www.tiktok.com/',
            'Connection': 'keep-alive',
            'Accept-Encoding': 'gzip, deflate',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'same-origin',
            'X-Tiktok-Region': 'US'  # –î–æ–¥–∞—î–º–æ –¥–ª—è –æ–±—Ö–æ–¥—É —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –æ–±–º–µ–∂–µ–Ω—å
        }
        if TIKTOK_TOKEN:
            headers['Cookie'] = f"msToken={TIKTOK_TOKEN}"
        async with aiohttp.ClientSession() as session:
            if PROXY:
                async with session.get(url, headers=headers, timeout=15, proxy=PROXY) as response:
                    content = await response.read()
                    response_text = await response.text()
            else:
                async with session.get(url, headers=headers, timeout=15) as response:
                    content = await response.read()
                    response_text = await response.text()
        with open("tiktok_response_raw.html", "wb") as f:
            f.write(content)
        logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ tiktok_response_raw.html: —Ä–æ–∑–º—ñ—Ä={len(content)} –±–∞–π—Ç")
        logger.info(f"–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ TikTok: {response.status}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ TikTok: {dict(response.headers)}")
        with open("tiktok_response.html", "w", encoding="utf-8") as f:
            f.write(response_text)
        logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ tiktok_response.html: –ø–µ—Ä—à—ñ 1000 —Å–∏–º–≤–æ–ª—ñ–≤: {response_text[:1000]}")
        
        soup = BeautifulSoup(response_text, 'html.parser')
        
        # –ü–æ—à—É–∫ meta-—Ç–µ–≥—ñ–≤
        meta_tags = soup.find_all('meta')
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ meta-—Ç–µ–≥—ñ–≤: {len(meta_tags)}")
        for tag in meta_tags:
            if tag.get('property') in ['og:video', 'og:image']:
                logger.info(f"Meta tag: {tag}")
        
        video_tag = soup.find('meta', {'property': 'og:video'})
        if video_tag and video_tag.get('content'):
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ meta: url={video_tag['content']}")
            return {'type': 'video', 'url': video_tag['content']}
        
        image_tag = soup.find('meta', {'property': 'og:image'})
        if image_tag and image_tag.get('content'):
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ meta: url={image_tag['content']}")
            return {'type': 'image', 'urls': [image_tag['content']]}
        
        # –ü–æ—à—É–∫ —É <video> —Ç–µ–≥–∞—Ö
        video_element = soup.find('video')
        if video_element and video_element.get('src'):
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ <video> —Ç–µ–≥: url={video_element['src']}")
            return {'type': 'video', 'url': video_element['src']}
        
        # –ü–æ—à—É–∫ —É —Å–∫—Ä–∏–ø—Ç–∞—Ö
        script = soup.find('script', {'id': '__NEXT_DATA__'})
        if script and script.string:
            try:
                json_data = json.loads(script.string)
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ __NEXT_DATA__: {json.dumps(json_data, indent=2)[:1000]}")
                video_url = json_data.get('props', {}).get('pageProps', {}).get('itemInfo', {}).get('itemStruct', {}).get('video', {}).get('playAddr')
                if video_url:
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ __NEXT_DATA__: url={video_url}")
                    return {'type': 'video', 'url': video_url}
                images = json_data.get('props', {}).get('pageProps', {}).get('itemInfo', {}).get('itemStruct', {}).get('imagePost', {}).get('images', [])
                if images:
                    image_urls = [img.get('displayImage') for img in images if img.get('displayImage')]
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ __NEXT_DATA__: count={len(image_urls)}")
                    return {'type': 'image', 'urls': image_urls}
            except json.JSONDecodeError as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É __NEXT_DATA__: {str(e)}")
        
        scripts = soup.find_all('script')
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç—ñ–≤: {len(scripts)}")
        for script in scripts:
            if script.string and 'itemInfo' in script.string:
                try:
                    json_data = json.loads(script.string)
                    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ itemInfo –≤ —Å–∫—Ä–∏–ø—Ç—ñ: {json.dumps(json_data, indent=2)[:1000]}")
                    video_url = json_data.get('itemInfo', {}).get('itemStruct', {}).get('video', {}).get('playAddr')
                    if video_url:
                        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç: url={video_url}")
                        return {'type': 'video', 'url': video_url}
                    images = json_data.get('itemInfo', {}).get('itemStruct', {}).get('imagePost', {}).get('images', [])
                    if images:
                        image_urls = [img.get('displayImage') for img in images if img.get('displayImage')]
                        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ TikTok –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç: count={len(image_urls)}")
                        return {'type': 'image', 'urls': image_urls}
                except json.JSONDecodeError:
                    continue
        
        logger.info("TikTok –º–µ–¥—ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ fallback")
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ TikTok fallback: {str(e)}")
        return None

async def get_pinterest_media(url, update, context):
    if not await check_request_limit('pinterest', update, context):
        return None
    await asyncio.sleep(get_random_delay())
    try:
        headers = {'User-Agent': get_random_user_agent()}
        async with aiohttp.ClientSession() as session:
            if PROXY:
                async with session.get(url, headers=headers, timeout=10, proxy=PROXY) as response:
                    response_text = await response.text()
            else:
                async with session.get(url, headers=headers, timeout=10) as response:
                    response_text = await response.text()
        soup = BeautifulSoup(response_text, 'html.parser')
        media = []
        og_image = soup.find('meta', {'property': 'og:image'})
        og_video = soup.find('meta', {'property': 'og:video'})
        if og_image and og_image.get('content'):
            media.append({'type': 'photo', 'url': og_image['content']})
        if og_video and og_video.get('content'):
            media.append({'type': 'video', 'url': og_video['content']})
        image_tags = soup.find_all('img', {'src': True})
        for img in image_tags:
            src = img['src']
            if src and 'pinimg.com' in src and src not in [m['url'] for m in media]:
                media.append({'type': 'photo', 'url': src})
        if not media:
            logger.info("Pinterest –º–µ–¥—ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ Pinterest –º–µ–¥—ñ–∞: count={len(media)}")
        return media
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Pinterest: {str(e)}")
        return None

@retry(stop=stop_after_attempt(7), wait=wait_fixed(3), retry=retry_if_exception_type((aiohttp.ClientError, telegram.error.RetryAfter)))
async def send_media_group_with_retry(bot, chat_id, media):
    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–ª—å–±–æ–º —ñ–∑ {len(media)} —Ñ–æ—Ç–æ")
    try:
        result = await bot.send_media_group(chat_id=chat_id, media=media)
        logger.info(f"–ê–ª—å–±–æ–º —ñ–∑ {len(media)} —Ñ–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return result
    except telegram.error.RetryAfter as e:
        logger.warning(f"Flood control: Retry in {e.retry_after} seconds")
        await asyncio.sleep(e.retry_after)
        raise

@retry(stop=stop_after_attempt(5), wait=wait_fixed(3), retry=retry_if_exception_type(telegram.error.TimedOut))
async def delete_message_with_retry(bot, chat_id, message_id):
    logger.info(f"–í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: message_id={message_id}")
    return await bot.delete_message(chat_id=chat_id, message_id=message_id)

async def send_final_message_with_retry(bot, chat_id):
    logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @InstaViewerBot'")
    try:
        await bot.send_message(chat_id=chat_id, text="–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @InstaViewerBot")
    except telegram.error.RetryAfter as e:
        logger.warning(f"Flood control –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: Retry in {e.retry_after} seconds")
        await asyncio.sleep(e.retry_after)
        await bot.send_message(chat_id=chat_id, text="–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @InstaViewerBot")
    except telegram.error.TimedOut as timeout_error:
        logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @InstaViewerBot': {str(timeout_error)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {update.message.text}, chat_type={update.message.chat.type}")
    text = update.message.text
    if update.message.chat.type == "private":
        if text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è":
            await update.message.reply_text("–í—Å—Ç–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Instagram, TikTok –∞–±–æ Pinterest-–ø–æ—Å—Ç:")
        elif text == "–î–æ–ø–æ–º–æ–≥–∞":
            await help_command(update, context)
    
    if "instagram.com" in text or "tiktok.com" in text or "pinterest.com" in text:
        processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–æ–±–ª—è—é —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è...")
        carousel_msg = None
        beauty_msg = None
        try:
            if "instagram.com" in text:
                if "/p/" in text or "/reel/" in text:
                    media = await get_instagram_media(text, update, context)
                    if media:
                        save_stats(update.message.from_user.id, text)
                        if media.media_type == 1:
                            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Instagram —Ñ–æ—Ç–æ: {media.thumbnail_url}")
                            await context.bot.send_photo(chat_id=update.message.chat_id, photo=str(media.thumbnail_url))
                        elif media.media_type == 2:
                            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Instagram –≤—ñ–¥–µ–æ: {media.video_url}")
                            await context.bot.send_video(chat_id=update.message.chat_id, video=str(media.video_url))
                        elif media.media_type == 8:
                            if media.resources:
                                photo_count = sum(1 for resource in media.resources if resource.media_type == 1)
                                carousel_msg = await update.message.reply_text(f"–û–≥–æ, —Ç—É—Ç —Ü—ñ–ª–∞ –≥–∞–ª–µ—Ä–µ—è –∑ {photo_count} —à–µ–¥–µ–≤—Ä—ñ–≤!")
                                photo_group = []
                                for i, resource in enumerate(media.resources, 1):
                                    logger.info(f"–û–±—Ä–æ–±–∫–∞ Instagram —Ä–µ—Å—É—Ä—Å—É {i}: type={resource.media_type}, url={resource.thumbnail_url or resource.video_url}")
                                    if resource.media_type == 1:
                                        photo_group.append(InputMediaPhoto(media=str(resource.thumbnail_url)))
                                    elif resource.media_type == 2:
                                        await context.bot.send_video(chat_id=update.message.chat_id, video=str(resource.video_url))
                                if photo_group:
                                    beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                                    if len(photo_group) <= 5:
                                        await asyncio.sleep(get_random_delay())
                                        try:
                                            await send_media_group_with_retry(context.bot, update.message.chat_id, photo_group)
                                        except telegram.error.TimedOut as timeout_error:
                                            logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(photo_group)} —Ñ–æ—Ç–æ: {str(timeout_error)}")
                                            return
                                        except telegram.error.RetryAfter as retry_error:
                                            logger.warning(f"Flood control –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(photo_group)} —Ñ–æ—Ç–æ: Retry in {retry_error.retry_after} seconds")
                                            await asyncio.sleep(retry_error.retry_after)
                                            await send_media_group_with_retry(context.bot, update.message.chat_id, photo_group)
                                    else:
                                        for i in range(0, len(photo_group), 3):
                                            chunk = photo_group[i:i+3]
                                            await asyncio.sleep(get_random_delay())
                                            try:
                                                await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                                            except telegram.error.TimedOut as timeout_error:
                                                logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: {str(timeout_error)}")
                                                continue
                                            except telegram.error.RetryAfter as retry_error:
                                                logger.warning(f"Flood control –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: Retry in {retry_error.retry_after} seconds")
                                                await asyncio.sleep(retry_error.retry_after)
                                                await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                                else:
                                    await update.message.reply_text("–£ –∫–∞—Ä—É—Å–µ–ª—ñ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ, –ª–∏—à–µ –≤—ñ–¥–µ–æ.")
                            else:
                                await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–¥—ñ–∞ –∑ –∫–∞—Ä—É—Å–µ–ª—ñ.")
                        else:
                            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –º–µ–¥—ñ–∞.")
                    else:
                        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Instagram –º–µ–¥—ñ–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Å—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.")
                else:
                    stories = await get_instagram_stories(text, update, context)
                    if stories:
                        save_stats(update.message.from_user.id, text)
                        carousel_msg = await update.message.reply_text(f"–û–≥–æ, –∑–Ω–∞–π—à–æ–≤ {len(stories)} Stories!")
                        photo_group = []
                        for i, story in enumerate(stories, 1):
                            logger.info(f"–û–±—Ä–æ–±–∫–∞ Story {i}: type={story.media_type}, url={story.thumbnail_url or story.video_url}")
                            if story.media_type == 1:
                                photo_group.append(InputMediaPhoto(media=str(story.thumbnail_url)))
                            elif story.media_type == 2:
                                await context.bot.send_video(chat_id=update.message.chat_id, video=str(story.video_url))
                        if photo_group:
                            beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                            for i in range(0, len(photo_group), 3):
                                chunk = photo_group[i:i+3]
                                await asyncio.sleep(get_random_delay())
                                try:
                                    await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                                except telegram.error.TimedOut as timeout_error:
                                    logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: {str(timeout_error)}")
                                    continue
                                except telegram.error.RetryAfter as retry_error:
                                    logger.warning(f"Flood control –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: Retry in {retry_error.retry_after} seconds")
                                    await asyncio.sleep(retry_error.retry_after)
                                    await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                        else:
                            await update.message.reply_text("–£ Stories –Ω–µ–º–∞—î —Ñ–æ—Ç–æ, –ª–∏—à–µ –≤—ñ–¥–µ–æ.")
                    else:
                        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Stories. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø—É–±–ª—ñ—á–Ω–∏–π –∞–±–æ —á–∏ –∞–∫–∞—É–Ω—Ç –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π.")
            
            elif "tiktok.com" in text:
                media = await get_tiktok_media(text, update, context)
                if media and media.get('type'):
                    save_stats(update.message.from_user.id, text)
                    if media['type'] == 'video':
                        video_url = media.get('url', '')
                        if video_url:
                            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ TikTok –≤—ñ–¥–µ–æ: {video_url}")
                            beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                            await context.bot.send_video(chat_id=update.message.chat_id, video=video_url)
                        else:
                            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ TikTok –≤—ñ–¥–µ–æ.")
                    elif media['type'] == 'image':
                        images = media.get('urls', [])
                        if images:
                            carousel_msg = await update.message.reply_text(f"–û–≥–æ, —Ç—É—Ç —Ü—ñ–ª–∞ –≥–∞–ª–µ—Ä–µ—è –∑ {len(images)} —à–µ–¥–µ–≤—Ä—ñ–≤!")
                            beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                            photo_group = [InputMediaPhoto(media=img) for img in images if img]
                            if photo_group:
                                for i in range(0, len(photo_group), 3):
                                    chunk = photo_group[i:i+3]
                                    await asyncio.sleep(get_random_delay())
                                    try:
                                        await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                                    except telegram.error.TimedOut as timeout_error:
                                        logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: {str(timeout_error)}")
                                        continue
                                    except telegram.error.RetryAfter as retry_error:
                                        logger.warning(f"Flood control –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: Retry in {retry_error.retry_after} seconds")
                                        await asyncio.sleep(retry_error.retry_after)
                                        await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                            else:
                                await update.message.reply_text("–£ TikTok-–ø–æ—Å—Ç—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.")
                        else:
                            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ TikTok –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
                    else:
                        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø TikTok –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
                else:
                    await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ TikTok –º–µ–¥—ñ–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Å—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.")
            
            elif "pinterest.com" in text:
                media = await get_pinterest_media(text, update, context)
                if media:
                    save_stats(update.message.from_user.id, text)
                    photo_group = []
                    for i, item in enumerate(media, 1):
                        logger.info(f"–û–±—Ä–æ–±–∫–∞ Pinterest —Ä–µ—Å—É—Ä—Å—É {i}: type={item['type']}, url={item['url']}")
                        if item['type'] == 'photo':
                            photo_group.append(InputMediaPhoto(media=item['url']))
                        elif item['type'] == 'video':
                            await context.bot.send_video(chat_id=update.message.chat_id, video=item['url'])
                    if photo_group:
                        carousel_msg = await update.message.reply_text(f"–û–≥–æ, —Ç—É—Ç —Ü—ñ–ª–∞ –≥–∞–ª–µ—Ä–µ—è –∑ {len(photo_group)} —à–µ–¥–µ–≤—Ä—ñ–≤!")
                        beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                        for i in range(0, len(photo_group), 3):
                            chunk = photo_group[i:i+3]
                            await asyncio.sleep(get_random_delay())
                            try:
                                await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                            except telegram.error.TimedOut as timeout_error:
                                logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: {str(timeout_error)}")
                                continue
                            except telegram.error.RetryAfter as retry_error:
                                logger.warning(f"Flood control –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É –∑ {len(chunk)} —Ñ–æ—Ç–æ: Retry in {retry_error.retry_after} seconds")
                                await asyncio.sleep(retry_error.retry_after)
                                await send_media_group_with_retry(context.bot, update.message.chat_id, chunk)
                    else:
                        await update.message.reply_text("–£ Pinterest-–ø–æ—Å—Ç—ñ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ, –ª–∏—à–µ –≤—ñ–¥–µ–æ.")
                else:
                    await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Pinterest –º–µ–¥—ñ–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Å—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.")
        except aiohttp.ClientError as timeout_error:
            logger.error(f"–Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–∞–π–º-–∞—É—Ç: {str(timeout_error)}")
            raise
        except telegram.error.TimedOut as timeout_error:
            logger.error(f"–¢–∞–π–º-–∞—É—Ç Telegram API: {str(timeout_error)}")
            raise
        except telegram.error.RetryAfter as retry_error:
            logger.warning(f"Flood control —É handle_message: Retry in {retry_error.retry_after} seconds")
            await asyncio.sleep(retry_error.retry_after)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}")
            try:
                await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
            except telegram.error.RetryAfter as retry_error:
                logger.warning(f"Flood control –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: Retry in {retry_error.retry_after} seconds")
                await asyncio.sleep(retry_error.retry_after)
                await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
            raise
        finally:
            await asyncio.sleep(get_random_delay())
            try:
                logger.info(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ processing_msg: message_id={processing_msg.message_id}")
                await delete_message_with_retry(context.bot, update.message.chat_id, processing_msg.message_id)
                if carousel_msg:
                    logger.info(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ carousel_msg: message_id={carousel_msg.message_id}")
                    await delete_message_with_retry(context.bot, update.message.chat_id, carousel_msg.message_id)
                if beauty_msg:
                    logger.info(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ beauty_msg: message_id={beauty_msg.message_id}")
                    await delete_message_with_retry(context.bot, update.message.chat_id, beauty_msg.message_id)
            except Exception as delete_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {str(delete_error)}")
        
        if "instagram.com" in text or "tiktok.com" in text or "pinterest.com" in text:
            await send_final_message_with_retry(context.bot, update.message.chat_id)

def main():
    if not TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather —ñ –¥–æ–¥–∞–π—Ç–µ –¥–æ ~/.bashrc.")
    try:
        application = Application.builder().token(TOKEN).get_updates_pool_timeout(60).get_updates_connect_timeout(60).get_updates_read_timeout(60).get_updates_write_timeout(60).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("about", about))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("feedback", feedback))
        application.add_handler(CommandHandler("donate", donate))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main: {str(e)}")
        raise

if __name__ == "__main__":
    main()