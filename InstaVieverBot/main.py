import telegram
from telegram import InputMediaPhoto, InputMediaVideo, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import asyncio
import os
import signal
import sys
from collections import deque
import random
import time
import json
from instagram_downloader import download_instagram, download_instagram_stories
from tiktok_downloader import download_tiktok
from pinterest_downloader import download_pinterest
from file_manager import cleanup_temp_files
from error_handler import handle_error
from utils import get_random_user_agent, get_random_delay

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('InstaVieverBot/tiktok_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('BOT_TOKEN')
REQUEST_LIMITS = {
    'instagram': {'limit': 50, 'reset_interval': 3600},
    'tiktok': {'limit': 500, 'reset_interval': 86400},
    'pinterest': {'limit': 500, 'reset_interval': 86400}
}
REQUEST_COUNTS_FILE = "InstaVieverBot/request_counts.json"
DELAY_HISTORY = deque(maxlen=3)

def load_request_counts():
    try:
        with open(REQUEST_COUNTS_FILE, "r") as f:
            return json.load(f)
    except:
        return {
            'instagram': {'count': 0, 'last_reset': time.time()},
            'tiktok': {'count': 0, 'last_reset': time.time()},
            'pinterest': {'count': 0, 'last_reset': time.time()}
        }

def save_request_counts(counts):
    with open(REQUEST_COUNTS_FILE, "w") as f:
        json.dump(counts, f)

def save_stats(user_id, link):
    try:
        with open("InstaVieverBot/stats.json", "r") as f:
            stats = json.load(f)
    except:
        stats = {}
    stats[str(user_id)] = stats.get(str(user_id), 0) + 1
    with open("InstaVieverBot/stats.json", "w") as f:
        json.dump(stats, f)

async def check_request_limit(platform, update, context):
    counts = load_request_counts()
    current_time = time.time()
    platform_data = counts.get(platform, {'count': 0, 'last_reset': current_time})
   
    reset_interval = REQUEST_LIMITS[platform]['reset_interval']
    if current_time - platform_data['last_reset'] >= reset_interval:
        platform_data['count'] = 0
        platform_data['last_reset'] = current_time
        counts[platform] = platform_data
        save_request_counts(counts)
   
    if platform_data['count'] >= REQUEST_LIMITS[platform]['limit']:
        wait_time = reset_interval - (current_time - platform_data['last_reset'])
        logger.warning(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –¥–ª—è {platform}: {platform_data['count']}/{REQUEST_LIMITS[platform]['limit']}. –ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥.")
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–µ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ —Ä–∞–∑.")
        await asyncio.sleep(wait_time)
        platform_data['count'] = 0
        platform_data['last_reset'] = current_time
        counts[platform] = platform_data
        save_request_counts(counts)
        return False
   
    platform_data['count'] += 1
    counts[platform] = platform_data
    save_request_counts(counts)
    logger.info(f"–ó–∞–ø–∏—Ç –¥–æ {platform}: {platform_data['count']}/{REQUEST_LIMITS[platform]['limit']}")
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤—ñ—Ç! –Ø @InstaViewerBot. –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Instagram, TikTok –∞–±–æ Pinterest-–ø–æ—Å—Ç, —ñ —è –ø–æ–∫–∞–∂—É –≤—Å—ñ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ! üì∏"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*\n"
        "1. –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Instagram-–ø–æ—Å—Ç, –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è Stories, TikTok-–≤—ñ–¥–µ–æ –∞–±–æ Pinterest-–ø–æ—Å—Ç.\n"
        "2. –Ø –ø–æ–≤–µ—Ä–Ω—É –≤—Å—ñ —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ Stories!\n"
        "üìå *–ü–æ—Ä–∞–¥–∞:* –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.\n"
        "–Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /about, /stats, /feedback, /donate",
        parse_mode="Markdown"
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø @InstaViewerBot ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É Instagram, TikTok —Ç–∞ Pinterest-–∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤! "
        "–°—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ. üòé"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    try:
        with open("InstaVieverBot/stats.json", "r") as f:
            stats = json.load(f)
        count = stats.get(user_id, 0)
        await update.message.reply_text(f"üìä –¢–∏ –Ω–∞–¥—ñ—Å–ª–∞–≤ {count} –ø–æ—Å–∏–ª–∞–Ω—å!")
    except:
        await update.message.reply_text("–©–µ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞–¥—ñ—à–ª–∏ –ø–µ—Ä—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—ó!")

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíô –ü—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤! –í–∞—à –¥–æ–Ω–∞—Ç –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —â–µ –∫—Ä—É—Ç—ñ—à—ñ –ø—Ä–æ—î–∫—Ç–∏!\n"
        "üí≥ Monobank: 7777 4444 7777 4444",
        parse_mode="Markdown"
    )

async def send_media_group_in_batches(context, chat_id, media_group):
    """–ù–∞–¥—Å–∏–ª–∞—î –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –ø–∞—Ä—Ç—ñ—è–º–∏ –ø–æ 10 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤."""
    batch_size = 10
    for i in range(0, len(media_group), batch_size):
        batch = media_group[i:i + batch_size]
        try:
            await context.bot.send_media_group(chat_id=chat_id, media=batch)
            await asyncio.sleep(get_random_delay())
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏: {str(e)}")
            raise

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {update.message.text}, chat_type={update.message.chat.type}")
    text = update.message.text
    processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–æ–±–ª—è—é —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è...")
    carousel_msg = None
    beauty_msg = None
   
    try:
        if "instagram.com" in text:
            if not await check_request_limit('instagram', update, context):
                return
            save_stats(update.message.from_user.id, text)
            if "/p/" in text or "/reel/" in text:
                media = await download_instagram(text)
                if media:
                    if media.media_type == 1:
                        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Instagram —Ñ–æ—Ç–æ: {media.thumbnail_url}")
                        await context.bot.send_photo(chat_id=update.message.chat_id, photo=str(media.thumbnail_url))
                    elif media.media_type == 2:
                        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Instagram –≤—ñ–¥–µ–æ: {media.video_url}")
                        await context.bot.send_video(chat_id=update.message.chat_id, video=str(media.video_url))
                    elif media.media_type == 8:
                        if media.resources:
                            photo_count = sum(1 for resource in media.resources if resource.media_type == 1)
                            carousel_msg = await update.message.reply_text(f"–û–≥–æ, —Ç—É—Ç —Ü—ñ–ª–∞ –≥–∞–ª–µ—Ä–µ—è –∑ {photo_count} —à–µ–¥–µ–≤—Ä—ñ–≤!")
                            photo_group = []
                            for i, resource in enumerate(media.resources, 1):
                                logger.info(f"–û–±—Ä–æ–±–∫–∞ Instagram —Ä–µ—Å—É—Ä—Å—É {i}: type={resource.media_type}, url={resource.thumbnail_url or resource.video_url}")
                                if resource.media_type == 1:
                                    photo_group.append(InputMediaPhoto(media=str(resource.thumbnail_url)))
                                elif resource.media_type == 2:
                                    await context.bot.send_video(chat_id=update.message.chat_id, video=str(resource.video_url))
                            if photo_group:
                                beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                                await send_media_group_in_batches(context, update.message.chat_id, photo_group)
                    else:
                        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –º–µ–¥—ñ–∞.")
                else:
                    await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Instagram –º–µ–¥—ñ–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Å—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.")
            else:
                stories = await download_instagram_stories(text)
                if stories:
                    carousel_msg = await update.message.reply_text(f"–û–≥–æ, –∑–Ω–∞–π—à–æ–≤ {len(stories)} Stories!")
                    photo_group = []
                    for i, story in enumerate(stories, 1):
                        logger.info(f"–û–±—Ä–æ–±–∫–∞ Story {i}: type={story.media_type}, url={story.thumbnail_url or story.video_url}")
                        if story.media_type == 1:
                            photo_group.append(InputMediaPhoto(media=str(story.thumbnail_url)))
                        elif story.media_type == 2:
                            await context.bot.send_video(chat_id=update.message.chat_id, video=str(story.video_url))
                    if photo_group:
                        beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                        await send_media_group_in_batches(context, update.message.chat_id, photo_group)
                else:
                    await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Stories. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø—É–±–ª—ñ—á–Ω–∏–π.")
       
        elif "tiktok.com" in text:
            if not await check_request_limit('tiktok', update, context):
                return
            save_stats(update.message.from_user.id, text)
            media = await download_tiktok(text)
            if media and media.get('type'):
                if media['type'] == 'video':
                    video_path = media.get('url', '')
                    if video_path and os.path.exists(video_path):
                        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ TikTok –≤—ñ–¥–µ–æ: {video_path}")
                        beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                        with open(video_path, 'rb') as video_file:
                            await context.bot.send_video(chat_id=update.message.chat_id, video=video_file)
                        os.remove(video_path)
                    else:
                        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ TikTok –≤—ñ–¥–µ–æ.")
                elif media['type'] == 'image':
                    images = media.get('urls', [])
                    if images:
                        carousel_msg = await update.message.reply_text(f"–û–≥–æ, —Ç—É—Ç —Ü—ñ–ª–∞ –≥–∞–ª–µ—Ä–µ—è –∑ {len(images)} —à–µ–¥–µ–≤—Ä—ñ–≤!")
                        beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                        photo_group = [InputMediaPhoto(media=img) for img in images if img]
                        await send_media_group_in_batches(context, update.message.chat_id, photo_group)
                else:
                    await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø TikTok –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
            else:
                await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ TikTok –º–µ–¥—ñ–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Å—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.")
       
        elif "pinterest.com" in text or "pin.it" in text:
            if not await check_request_limit('pinterest', update, context):
                return
            save_stats(update.message.from_user.id, text)
            media = await download_pinterest(text)
            if media:
                photo_group = []
                for i, item in enumerate(media, 1):
                    logger.info(f"–û–±—Ä–æ–±–∫–∞ Pinterest —Ä–µ—Å—É—Ä—Å—É {i}: type={item['type']}, url={item['url']}")
                    if item['type'] == 'photo':
                        photo_group.append(InputMediaPhoto(media=item['url']))
                    elif item['type'] == 'video':
                        await context.bot.send_video(chat_id=update.message.chat_id, video=item['url'])
                if photo_group:
                    carousel_msg = await update.message.reply_text(f"–û–≥–æ, —Ç—É—Ç —Ü—ñ–ª–∞ –≥–∞–ª–µ—Ä–µ—è –∑ {len(photo_group)} —à–µ–¥–µ–≤—Ä—ñ–≤!")
                    beauty_msg = await update.message.reply_text("–î–∏–≤–∏ —è–∫–∞ –∫—Ä–∞—Å–∞!..")
                    await send_media_group_in_batches(context, update.message.chat_id, photo_group)
                else:
                    await update.message.reply_text("–£ Pinterest-–ø–æ—Å—Ç—ñ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ, –ª–∏—à–µ –≤—ñ–¥–µ–æ.")
            else:
                await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Pinterest –º–µ–¥—ñ–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Å—Ç –ø—É–±–ª—ñ—á–Ω–∏–π.")
   
    except Exception as e:
        error_msg = handle_error(e)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}", exc_info=True)
        await context.bot.send_message(chat_id="YOUR_ADMIN_TELEGRAM_ID", text=f"–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {str(e)}")
        await update.message.reply_text(error_msg)
   
    finally:
        await asyncio.sleep(get_random_delay())
        try:
            if processing_msg:
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=processing_msg.message_id)
            if carousel_msg:
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=carousel_msg.message_id)
            if beauty_msg:
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=beauty_msg.message_id)
        except Exception as delete_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {str(delete_error)}")
        cleanup_temp_files()
        await context.bot.send_message(chat_id=update.message.chat_id, text="–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @InstaViewerBot")

def signal_handler(sig, frame):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ Ctrl+C, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def main():
    logger.info("Executing main()...")
    if not TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
   
    logger.info("Building Application...")
    application = Application.builder().token(TOKEN).build()
    logger.info("Application built successfully!")
   
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("feedback", feedback))
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
   
    logger.info("Handlers added, starting polling...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
